br(),
br(),
plotlyOutput("lgawaterfall"),
if (failed)
div(tags$b("Table error.", style = "color: red;")),
footer = tagList(
modalButton("Close"),
)
)
}
output$ebovalues<-DT::renderDataTable({
datatable(
data_subset_modified()[,c(3,4,5,6,11,12,13,14,15,16,17,18,19,20)],
class = 'cell-border stripe',
rownames = FALSE,
escape = FALSE,
container = ebo(),
callback = JS(js),
selection = "none",
options = list(
searching = FALSE,
preDrawCallback = JS('function() {
Shiny.unbindAll(this.api().table().node());
}'),
drawCallback = JS('function() {
Shiny.bindAll(this.api().table().node()); } ') ,
dom = 'Bftrip',
paging = FALSE,
info = FALSE,
columnDefs = list(list(
className = 'dt-center', targets = 1:3),list(className='dt-center temp', targets= 4:13), list(width='250px', targets=c(0)),
list(width="60px", targets=c(1,2,3)),
list(width="60px", targets=c(4,5,6,7))
),
rownames = FALSE,
ordering = FALSE
)
)
})
#open the visitation modal dialog when clicked
observeEvent(input$lga_visitation,{
showModal(visitationModal_lga())
})
#open the lga chart modal dialog when clicked
observeEvent(input$lgachart,{
showModal(lgachartModal())
})
#open the visitation modal dialog when clicked
observeEvent(input$state_visitation,{
showModal(visitationModal_state())
})
#open the lga chart modal dialog when clicked
observeEvent(input$statechart,{
showModal(statechartModal())
})
#Example waterfall chart of LGA Net Impacts
output$lgawaterfall <- renderPlotly({
#dummy waterfall chart info
x= list("CS LGA", "PS LGA", "EBO LGA", "Total LGA")
measure= c("relative","relative","relative","total")
text=c("-$2,408,726","-$232,000","-$49,650","-$2,690,376")
y=c(-2408726,-232000,-49650,0)
chart = data.frame(x=factor(x,levels=x),measure,text,y)
fig <- plot_ly(
chart, name = "20", type = "waterfall", measure = ~measure,
x = ~x, textposition = "outside", y= ~y, text =~text, decreasing=list(marker=list(color="#002664")), totals=list(marker=list(color="#495054")), width=700, height=400,
connector = list(line = list(color= "rgb(63, 63, 63)")))
fig <- fig %>%
layout(title = "Net LGA boundary of analysis impacts estimates",
xaxis = list(title = ""),
yaxis = list(title = "", tickformat="$,"),
autosize = FALSE,
showlegend = FALSE,
font=plotfont
)
fig
})
# Using lapply for observers
# split up the lapplys and removed from the overarching observe() as it initialises a new observer each time
lapply(seq_len(nrow(isolate(data_subset_modified()))), function(i) {
widthId <- paste0("width", i)
observeEvent(input[[widthId]], {
print(paste("Index:", i, "Width value:", input[[widthId]],
"Beach_FID:", data_subset_modified()$Beach_FID[i]))
#if user clears the input, revert back to base value
if(is.na(input[[widthId]])){
updateNumericInput(session,widthId,value=data_subset_modified()$Width_B[i])
}
data[data$Beach_FID == data_subset_modified()$Beach_FID[i], "Width_S"] <<- input[[widthId]]
}, ignoreInit = TRUE)
})
lapply(seq_len(nrow(isolate(data_subset_modified()))), function(i) {
lengthId <- paste0("length", i)
observeEvent(input[[lengthId]], {
print(paste("Index:", i, "Length value:", input[[lengthId]],
"Beach_FID:", data_subset_modified()$Beach_FID[i]))
#if user clears the input, revert back to base value
if(is.na(input[[lengthId]])){
updateNumericInput(session,lengthId,value=data_subset_modified()$Length_B[i])
}
data[data$Beach_FID == data_subset_modified()$Beach_FID[i], "Length_S"] <<- input[[lengthId]]
}, ignoreInit = TRUE)
})
lapply(seq_len(nrow(isolate(data_subset_modified()))), function(i) {
patrolledId <- paste0("patrolled", i)
observeEvent(input[[patrolledId]], {
print(paste("Index:", i, "Patrolled value:", input[[patrolledId]],
"Beach_FID:", data_subset_modified()$Beach_FID[i]))
data[data$Beach_FID == data_subset_modified()$Beach_FID[i], "Patrolled_S"] <<- input[[patrolledId]]
}, ignoreInit = TRUE)
})
lapply(seq_len(nrow(isolate(data_subset_modified()))), function(i) {
closeId <- paste0("close", i)
observeEvent(input[[closeId]], {
print(paste("Index:", i, "Closed value:", input[[closeId]],
"Beach_FID:", data_subset_modified()$Beach_FID[i]))
data[data$Beach_FID == data_subset_modified()$Beach_FID[i], "Close_S"] <<- input[[closeId]]
}, ignoreInit = TRUE)
})
#unbind the dataTables on input change otherwise interactivity is lost
observeEvent(input$lga,{
session$sendCustomMessage("unbindDT", "lgacsps")
output$selectedlga<-renderText(paste("Selected LGA: ",input$lga))
output$selectedlga1<-renderText(paste("Selected LGA: ",input$lga))
})
observeEvent(input$reset, {
for (i in seq_len(nrow(data_subset_modified()))) {
updateNumericInput(session, paste0("width", i), value = data_subset_modified()$Width_B[i])
updateNumericInput(session, paste0("length", i), value = data_subset_modified()$Length_B[i])
updateSelectInput(session, paste0("patrolled", i), choices = c("Yes", "No"), selected = data_subset_modified()$Patrolled_B[i])
updateSelectInput(session, paste0("close", i), choices = c("Yes", "No"), selected = "No")
# updateTextInput(session, paste0("csb", i), paste("$", value = prettyNum(1, big.mark=",", scientific=FALSE)))
updateTextInput(session, paste0("csb", i), value = '$ 0')
updateTextInput(session, paste0("css", i), value = '$ 0')
updateTextInput(session, paste0("csc", i), value = '$ 0')
updateTextInput(session, paste0("psb", i), value = '$ 0')
updateTextInput(session, paste0("pss", i), value = '$ 0')
updateTextInput(session, paste0("psc", i), value = '$ 0')
}
})
#create download button for LGA CS/PS data
output$downloadData <- downloadHandler(
filename = function() {
paste("data-", Sys.Date(), ".xlsx", sep="")
},
content = function(file) {
write.xlsx(data, file, rowNames = FALSE)
}
)
#create download button for visitation data
output$downloadvisitationData <- downloadHandler(
filename = function() {
paste("data-", Sys.Date(), ".xlsx", sep="")
},
content = function(file) {
write.xlsx(data, file, rowNames = FALSE)
}
)
#create download button for State CS/PS data
output$downloadstateData <- downloadHandler(
filename = function() {
paste("data-", Sys.Date(), ".xlsx", sep="")
},
content = function(file) {
write.xlsx(data, file, rowNames = FALSE)
}
)
# Calculation function
observeEvent(input$calculate, {
# Initialize the progress bar
progress <- shiny::Progress$new()
# Start the progress bar with a message
progress$set(message = "Processing calculation...", value = 0)
df1_s <- df1
df1_s <- select(df1_s, -c(Patrolled_B, Length_B, Width_B, Beach_availability))
df2_s <- df2
df2_s <- select(df2_s, -c(Patrolled_B, Length_B, Width_B, Beach_availability))
df3_s <- df3
df3_s <- select(df3_s, -c(Patrolled_B, Length_B, Width_B, Beach_availability))
df3_s_1 <- df3
df3_s_1 <- select(df3_s_1, -c(Patrolled_B, Length_B, Width_B, Beach_availability))
## adjust international for scenario
df1_s <- merge(df1_s, data[, c("Beach_FID", "Patrolled_S", "Length_S", "Width_S", "Close_S")], by = "Beach_FID", all.x = TRUE)
df1_s$Patrolled_S <- ifelse(df1_s$Patrolled_S == "Yes", 1, 0)
df1_s$Beach_availability <- ifelse(df1_s$Close_S == "Yes", 0, 1)
# Define utility calculation function
utility_calc_step2_s <- function(frame, alpha_name, utility_name) {
frame[[utility_name]] <- 0
frame[[utility_name]] <- frame[[alpha_name]] +
(frame[["Iconic"]] * 0.114) +
(frame[["Surf"]] * 0.134) +
(frame[["Bay"]] * 0.184) +
((frame[["Length_S"]] / 1000) * (-0.00549)) +
(frame[["Width_S"]] * 0.0127) +
(frame[["Changing room"]] * 0.404) +
(frame[["Patrolled_S"]] * 0.379) +
(frame[["Restaurant"]] * 0.259) +
(frame[["Park"]] * 0.257) +
((frame[["Distance_m"]] / 1000) * (-0.0101))
frame[[utility_name]] <- frame[[utility_name]] * frame[["Beach_availability"]]
return(frame)
}
df1_s <- utility_calc_step2_s(df1_s, 'alpha_1', 'utility_scenario')
# Simply group by LGA_FID then calculate the sum of exp_utility for each LGA
temp <- unique(df1_s[c('LGA_FID', 'sum_exp_base')])
temp['deno'] <- 1 - (temp$sum_exp_base + 1)**(-1)
# Simply calculate the exponential of utility
df1_s['exp_utility_scenario'] <- exp(df1_s$utility_scenario) * df1_s$Beach_availability
temp_scenario <- df1_s %>%
group_by(LGA_FID) %>%
summarise(sum_exp_scenario = sum(exp_utility_scenario)) %>%
ungroup()
temp_scenario['numer'] <- 1 - (temp_scenario$sum_exp_scenario + 1)**(-1)
temp <- merge(temp, temp_scenario, by = "LGA_FID", all.x = TRUE)
# Remove duplicates based on LGA_FID and international_visitors, and merge with temp
temp <- merge(temp,
unique(df1_s[c('LGA_FID', 'international_visitors')]),
by = "LGA_FID",
all.x = TRUE)
temp$T_O_scenario <- with(temp, (numer / deno) * international_visitors)
df1_s <- merge(df1_s, temp[, c('LGA_FID', 'T_O_scenario', 'sum_exp_scenario')], by = 'LGA_FID', all.x = TRUE)
df1_s$prob_scenario <- with(df1_s, (exp_utility_scenario / sum_exp_scenario) * Beach_availability)
df1_s$international_x_prob_scenario <- with(df1_s, T_O_scenario * prob_scenario * Beach_availability)
temp <- aggregate(df1_s$international_x_prob_scenario, by = list(df1_s$Beach_FID), sum)
colnames(temp) <- c('Beach_FID', 'international_visit_beach_scenario')
df1_s <- merge(df1_s, temp, by = 'Beach_FID', all.x = TRUE)
cat("Total number of international visitors in base case:", format(sum(df1_s$international_x_prob_base), big.mark = ",", scientific = FALSE), "\n")
cat("Total number of international visitors in scenario:", format(sum(df1_s$international_x_prob_scenario), big.mark = ",", scientific = FALSE), "\n")
cat("Total number of international visitors drop:", format(sum(df1_s$international_x_prob_base) - sum(df1_s$international_x_prob_scenario), big.mark = ",", scientific = FALSE), "\n")
#Ali - Test 3
# write_csv(df1_s, 'Step3-Ali.csv')
progress$inc(2/10)
rm(temp)
rm(temp_scenario)
gc()
## adjust interstate for scenario
df2_s <- merge(df2_s, data[, c("Beach_FID", "Patrolled_S", "Length_S", "Width_S", "Close_S")], by = "Beach_FID", all.x = TRUE)
df2_s$Patrolled_S <- ifelse(df2_s$Patrolled_S == "Yes", 1, 0)
df2_s$Beach_availability <- ifelse(df2_s$Close_S == "Yes", 0, 1)
df2_s <- utility_calc_step2_s(df2_s, 'alpha_2', 'utility_scenario')
# Simply group by LGA_FID then calculate the sum of exp_utility for each LGA
temp <- unique(df2_s[c('LGA_FID', 'sum_exp_base')])
temp['deno'] <- 1 - (temp$sum_exp_base + 1)**(-1)
# Simply calculate the exponential of utility
df2_s['exp_utility_scenario'] <- exp(df2_s$utility_scenario) * df2_s$Beach_availability
temp_scenario <- df2_s %>%
group_by(LGA_FID) %>%
summarise(sum_exp_scenario = sum(exp_utility_scenario)) %>%
ungroup()
temp_scenario['numer'] <- 1 - (temp_scenario$sum_exp_scenario + 1)**(-1)
temp <- merge(temp, temp_scenario, by = "LGA_FID", all.x = TRUE)
# Remove duplicates based on LGA_FID and interstate_visitors, and merge with temp
temp <- merge(temp,
unique(df2_s[c('LGA_FID', 'interstate_visitors')]),
by = "LGA_FID",
all.x = TRUE)
temp$T_O_scenario <- (temp$numer / temp$deno) * temp$interstate_visitors
df2_s <- merge(df2_s, temp[, c('LGA_FID', 'T_O_scenario', 'sum_exp_scenario')], by = 'LGA_FID', all.x = TRUE)
df2_s$prob_scenario <- with(df2_s, (exp_utility_scenario / sum_exp_scenario) * Beach_availability)
df2_s$interstate_x_prob_scenario <- with(df2_s, T_O_scenario * prob_scenario * Beach_availability)
temp <- aggregate(df2_s$interstate_x_prob_scenario, by = list(df2_s$Beach_FID), sum)
colnames(temp) <- c('Beach_FID', 'interstate_visit_beach_scenario')
df2_s <- merge(df2_s, temp, by = 'Beach_FID', all.x = TRUE)
cat("Total number of interstate visitors in base case:", format(sum(df2_s$interstate_x_prob_base), big.mark = ",", scientific = FALSE), "\n")
cat("Total number of interstate visitors in scenario:", format(sum(df2_s$interstate_x_prob_scenario), big.mark = ",", scientific = FALSE), "\n")
cat("Total number of interstate visitors drop:", format(sum(df2_s$interstate_x_prob_base) - sum(df2_s$interstate_x_prob_scenario), big.mark = ",", scientific = FALSE), "\n")
#Ali - Test 4
write_csv(df2_s, 'Step4-Ali.csv')
progress$inc(4/10)
rm(temp)
rm(temp_scenario)
gc()
## adjust total visitors for scenario
df3_s <- merge(df3_s, data[, c("Beach_FID", "Patrolled_S", "Length_S", "Width_S", "Close_S")], by = "Beach_FID", all.x = TRUE)
df3_s$Patrolled_S <- ifelse(df3_s$Patrolled_S == "Yes", 1, 0)
df3_s$Beach_availability <- ifelse(df3_s$Close_S == "Yes", 0, 1)
utility_calc_step3_s <- function(frame, alpha_name, utility_name) {
frame[[utility_name]] <- 0
frame[[utility_name]] <- frame[[alpha_name]] +
(frame[["Iconic"]] * 0.114) +
(frame[["Surf"]] * 0.134) +
(frame[["Bay"]] * 0.184) +
((frame[["Length_S"]] / 1000) * (-0.00549)) +
(frame[["Width_S"]] * 0.0127) +
(frame[["Changing room"]] * 0.404) +
(frame[["Patrolled_S"]] * 0.379) +
(frame[["Restaurant"]] * 0.259) +
(frame[["Park"]] * 0.257) +
((frame[["Distance_m"]] / 1000) * (-0.0101))
frame[[utility_name]] <- frame[[utility_name]] * frame[["Beach_availability"]]
return(frame)
}
df3_s <- utility_calc_step3_s(df3_s, 'alpha_3', 'utility_scenario')
# Simply group by LGA_FID then calculate the sum of exp_utility for each LGA
temp <- unique(df3_s[c('LGA_FID', 'sum_exp_base')])
temp$deno <- 1 - (temp$sum_exp_base + 1)**(-1)
# Simply calculate the exponential of utility
df3_s$exp_utility_scenario <- exp(df3_s$utility_scenario) * df3_s$Beach_availability
temp_scenario <- df3_s %>%
group_by(LGA_FID) %>%
summarise(sum_exp_scenario = sum(exp_utility_scenario)) %>%
ungroup()
temp_scenario$numer <- 1 - (temp_scenario$sum_exp_scenario + 1)**(-1)
temp <- merge(temp, temp_scenario, by = "LGA_FID", all.x = TRUE)
temp_total_domestic <- unique(df3_s[c('LGA_FID','Total_Domestic_visit_by_LGA')])
temp <- merge(temp, temp_total_domestic, by = "LGA_FID", all.x = TRUE)
temp$T_O_scenario <- (temp$numer / temp$deno) * temp$Total_Domestic_visit_by_LGA
df3_s <- merge(df3_s, temp[, c('LGA_FID', 'T_O_scenario', 'sum_exp_scenario')], by = 'LGA_FID', all.x = TRUE)
df3_s$prob_scenario <- with(df3_s, (exp_utility_scenario / sum_exp_scenario) * Beach_availability)
df3_s$domestic_x_prob_scenario <- with(df3_s, T_O_scenario * prob_scenario * Beach_availability)
temp_out <- aggregate(df3_s['domestic_x_prob_scenario'], by = list(df3_s$Beach_FID), sum)
names(temp_out) <- c('Beach_FID', 'domestic_visitors_scenario')
temp_out$'% domestic_scenario' <- (temp_out$domestic_visitors_scenario / sum(temp_out$domestic_visitors_scenario)) * 100
df3_s <- merge(df3_s, temp_out, by = c('Beach_FID'), all.x = TRUE)
cat("Total number of domestic visitors in base case:", format(sum(df3_s$domestic_x_prob_base), big.mark = ",", scientific = FALSE), "\n")
cat("Total number of domestic visitors in scenario:", format(sum(df3_s$domestic_x_prob_scenario), big.mark = ",", scientific = FALSE), "\n")
cat("Total number of domestic visitors drop:", format(sum(df3_s$domestic_x_prob_base) - sum(df3_s$domestic_x_prob_scenario), big.mark = ",", scientific = FALSE), "\n")
#Ali - Test 5
write_csv(df3_s, 'Step5-Ali.csv')
progress$inc(6/10)
rm(temp)
rm(temp_scenario)
gc()
# calc the consumer surplus for scenario
df3_s_1 <- merge(df3_s_1, data[, c("Beach_FID", "Patrolled_S", "Length_S", "Width_S", "Close_S")], by = "Beach_FID", all.x = TRUE)
df3_s_1$Patrolled_S <- ifelse(df3_s_1$Patrolled_S == "Yes", 1, 0)
df3_s_1$Beach_availability <- ifelse(df3_s_1$Close_S == "Yes", 0, 1)
print(paste("++++++++++++> Beach_LGA_Name in df3_s_1: ", "Beach_LGA_Name" %in% names(df3_s_1)))
cat(nrow(df3_s_1), "\n")
df3_s_1 <- merge(df3_s_1, temp_out, by = 'Beach_FID', all.x = TRUE)
cat(nrow(df3_s_1), "\n")
df3_s_1[['utility_scenario']] <- 0
df3_s_1[['utility_scenario']] <- df3_s_1[['alpha_3']] +
(df3_s_1[["Iconic"]] * 0.114) +
(df3_s_1[["Surf"]] * 0.134) +
(df3_s_1[["Bay"]] * 0.184) +
((df3_s_1[["Length_S"]] / 1000) * (-0.00549)) +
(df3_s_1[["Width_S"]] * 0.0127) +
(df3_s_1[["Changing room"]] * 0.404) +
(df3_s_1[["Patrolled_S"]] * 0.379) +
(df3_s_1[["Restaurant"]] * 0.259) +
(df3_s_1[["Park"]] * 0.257) +
((df3_s_1[["Distance_m"]] / 1000) * (-0.0101))
df3_s_1[['utility_scenario']] <- df3_s_1[['utility_scenario']] * df3_s_1[["Beach_availability"]]
df3_s_1$exp_utility_scenario <- exp(df3_s_1$utility_scenario) * df3_s_1$Beach_availability
temp <- df3_s_1 %>%
group_by(LGA_FID) %>%
summarise(sum_exp_scenario = sum(exp_utility_scenario))
# If the sum is zero, set it to 1
temp$sum_exp_scenario[temp$sum_exp_scenario == 0] <- 1
# Take the logarithm of the sum, set it to 0 if it is already 0
temp$log_sum_expscenario <- log(temp$sum_exp_scenario)
temp$log_sum_expscenario[temp$sum_exp_scenario == 0] <- 0
# Merge it back to df3_s_1
df3_s_1 <- left_join(df3_s_1, temp, by = "LGA_FID")
df3_s_1$prob_DO_scenario <- with(df3_s_1, exp_utility_scenario / sum_exp_scenario) * df3_s_1$Beach_availability
df3_s_1$monetrize_log_sum <- (df3_s_1$log_sum_expscenario * (-1)) / (1.19 * (-0.0101) * 2)
df3_s_1$pd <- df3_s_1$'% domestic_scenario' / 100
df3_s_1$pod_scenario <- with(df3_s_1, (prob_DO_scenario * po) / pd)
df3_s_1[df3_s_1$Beach_availability == 0, 'pod_scenario'] <- 0
temp <- aggregate(df3_s_1$pod_scenario, by = list(df3_s_1$Beach_FID), sum)
colnames(temp) <- c('Beach_FID', 'pod_scenario_sum')
df3_s_1 <- merge(df3_s_1, temp, by = 'Beach_FID', all.x = TRUE)
df3_s_1$'% pod_scenario' <- df3_s_1$pod_scenario / df3_s_1$pod_scenario_sum
df3_s_1[df3_s_1$Beach_availability == 0, '% pod_scenario'] <- 0
df3_s_1$domestic_x_prob_scenario <- df3_s_1$domestic_visitors_scenario * df3_s_1$'% pod_scenario'
cat(sum(df3_s_1$domestic_x_prob_scenario), "\n")
df3_s_1$Weight <- df3_s_1$Total_Domestic_visit_by_LGA / df3_s_1$LGA_population_2023
df3_s_1$Monetized_Logsum_Wt_scenario <- df3_s_1$monetrize_log_sum * df3_s_1$Weight
df3_s_1$Total_CS_Base <- df3_s_1$domestic_x_prob_base * df3_s_1$Monetized_Logsum_Wt_scenario
df3_s_1$Total_CS_Scenario <- df3_s_1$domestic_x_prob_scenario * df3_s_1$Monetized_Logsum_Wt_scenario
df3_s_1$CS_Delta <- df3_s_1$Total_CS_Scenario - df3_s_1$Total_CS_Base
#Ali - Test 6
write_csv(df3_s_1, 'Step6-Ali.csv')
rm(temp)
gc()
progress$inc(8/10)
progress$close()
# create LGA_CS - Filter rows
LGA_CS <- df3_s_1[df3_s_1$LGA_Name==input$lga & df3_s_1$Beach_FID %in% as.list(sort(unique(BASE_data[BASE_data$LGA_Name == input$lga, "Beach_FID"]))),]
# Select columns
LGA_CS <- LGA_CS[, c('Beach_FID', 'Total_CS_Base', 'Total_CS_Scenario', 'CS_Delta')]
# Sort dataframe by 'Beach_FID'
LGA_CS <- LGA_CS[order(LGA_CS$Beach_FID), ]
#create Producer surplus for LGA boundary
LGA_PS <- final_table_base[final_table_base$Beach_FID %in% unique(BASE_data[BASE_data$LGA_Name == input$lga, 'Beach_FID']),]
temp <- df3 %>%
filter(within2hr == 1) %>%
group_by(Beach_FID) %>%
summarise(domestic_x_prob_base = sum(domestic_x_prob_base)) %>%
rename(within2hr_visitors_base = domestic_x_prob_base)
LGA_PS <- merge(LGA_PS, temp, by = 'Beach_FID', all.x = TRUE)
LGA_PS$within2hr_visitors_base[is.na(LGA_PS$within2hr_visitors_base)] <- 0
temp <- df3 %>%
filter(outside2hr == 1) %>%
group_by(Beach_FID) %>%
summarise(domestic_x_prob_base = sum(domestic_x_prob_base)) %>%
rename(outside2hr_visitors_base = domestic_x_prob_base)
LGA_PS <- merge(LGA_PS, temp, by = 'Beach_FID', all.x = TRUE)
LGA_PS$outside2hr_visitors_base[is.na(LGA_PS$outside2hr_visitors_base)] <- 0
# expenditure for PS:
ps_expense <- read.csv('Producer Surplus.csv', fileEncoding = 'ISO-8859-1')
names(ps_expense) <- c('Beach_LGA_Name','international_expense','day_expense','overnight_expense')
ps_expense$Beach_LGA_Name <- sub('Bega', 'Bega Valley', ps_expense$Beach_LGA_Name)
ps_expense$Beach_LGA_Name <- sub('Clarence', 'Clarence Valley', ps_expense$Beach_LGA_Name)
ps_expense$Beach_LGA_Name <- sub('Mid Coast', 'Mid-Coast', ps_expense$Beach_LGA_Name)
ps_expense$Beach_LGA_Name <- sub('Nambucca', 'Nambucca Valley', ps_expense$Beach_LGA_Name)
ps_expense$Beach_LGA_Name <- sub('Port Macquarie-Hasting', 'Port Macquarie-Hastings', ps_expense$Beach_LGA_Name)
ps_expense$Beach_LGA_Name <- sub('Sutherland', 'Sutherland Shire', ps_expense$Beach_LGA_Name)
temp <- BASE_data[,c('Beach_FID','LGA_Name')]
names(temp) <- c('Beach_FID','Beach_LGA_Name')
LGA_PS <- merge(LGA_PS, temp, by = 'Beach_FID', all.x = TRUE)
LGA_PS <- merge(LGA_PS, ps_expense, by = 'Beach_LGA_Name', all.x = TRUE)
temp <- df1_s[,c('Beach_FID','international_visit_beach_scenario')] %>%
distinct()
LGA_PS <- merge(LGA_PS, temp, by = 'Beach_FID', all.x = TRUE)
temp <- df2_s[,c('Beach_FID','interstate_visit_beach_scenario')] %>%
distinct()
LGA_PS <- merge(LGA_PS, temp, by = 'Beach_FID', all.x = TRUE)
temp <- df3_s_1 %>%
filter(within2hr == 1) %>%
group_by(Beach_FID) %>%
summarise(domestic_x_prob_scenario = sum(domestic_x_prob_scenario)) %>%
rename(within2hr_visitors_scenario = domestic_x_prob_scenario)
LGA_PS <- merge(LGA_PS, temp, by = 'Beach_FID', all.x = TRUE)
LGA_PS$within2hr_visitors_scenario[is.na(LGA_PS$within2hr_visitors_scenario)] <- 0
temp <- df3_s_1 %>%
filter(outside2hr == 1) %>%
group_by(Beach_FID) %>%
summarise(domestic_x_prob_scenario = sum(domestic_x_prob_scenario)) %>%
rename(outside2hr_visitors_scenario = domestic_x_prob_scenario)
LGA_PS <- merge(LGA_PS, temp, by = 'Beach_FID', all.x = TRUE)
LGA_PS$outside2hr_visitors_scenario[is.na(LGA_PS$outside2hr_visitors_scenario)] <- 0
rm(temp)
gc()
LGA_PS$International_PS_Base <- LGA_PS$international_visit_beach_base * LGA_PS$international_expense * 1.11
LGA_PS$Interstate_PS_Base <- LGA_PS$interstate_visit_beach_base * LGA_PS$overnight_expense * 1.11
LGA_PS$within2hr_PS_Base <- LGA_PS$within2hr_visitors_base * LGA_PS$day_expense * 1.11
LGA_PS$outside2hr_PS_Base <- LGA_PS$outside2hr_visitors_base * LGA_PS$overnight_expense * 1.
LGA_PS$Total_PS_Base <- LGA_PS$International_PS_Base + LGA_PS$Interstate_PS_Base + LGA_PS$within2hr_PS_Base + LGA_PS$outside2hr_PS_Base
LGA_PS$International_PS_Scenario <- LGA_PS$international_visit_beach_scenario * LGA_PS$international_expense * 1.11
LGA_PS$Interstate_PS_Scenario <- LGA_PS$interstate_visit_beach_scenario * LGA_PS$overnight_expense * 1.11
LGA_PS$within2hr_PS_Scenario <- LGA_PS$within2hr_visitors_scenario * LGA_PS$day_expense * 1.11
LGA_PS$outside2hr_PS_Scenario <- LGA_PS$outside2hr_visitors_scenario * LGA_PS$overnight_expense * 1.11
LGA_PS$Total_PS_Scenario <- LGA_PS$International_PS_Scenario + LGA_PS$Interstate_PS_Scenario + LGA_PS$within2hr_PS_Scenario + LGA_PS$outside2hr_PS_Scenario
LGA_PS$Total_PS_Change <- LGA_PS$Total_PS_Scenario - LGA_PS$Total_PS_Base
State <- LGA_PS[,c('Beach_FID','Beach_Name')]
State$State_LGA_CS_Base <- unlist(LGA_CS$Total_CS_Base)
State$State_intraState_CS_Base <- LGA_PS$within2hr_PS_Base + LGA_PS$outside2hr_PS_Base
State$Total_CS_Base <- State$State_LGA_CS_Base + State$State_intraState_CS_Base
State$Total_LGA_PS_Base <- LGA_PS$International_PS_Base + LGA_PS$Interstate_PS_Base
State$State_LGA_CS_Scenario <- unlist(LGA_CS$Total_CS_Scenario)
State$State_intraState_CS_Scenario <- LGA_PS$within2hr_PS_Scenario + LGA_PS$outside2hr_PS_Scenario
State$Total_CS_Scenario <- State$State_LGA_CS_Scenario + State$State_intraState_CS_Scenario
State$Total_LGA_PS_Scenario <- LGA_PS$International_PS_Scenario + LGA_PS$Interstate_PS_Scenario
# visitor frame
out_visitors <- df3_s_1 %>%
filter(LGA_Name == input$lga, Beach_FID %in% unique(BASE_data[BASE_data$LGA_Name==input$lga,]$Beach_FID)) %>%
select(Beach_FID, Beach_Name, domestic_x_prob_base, domestic_x_prob_scenario)
out_visitors <- merge(out_visitors, df1_s[df1_s$LGA_Name==input$lga, c('Beach_FID','international_x_prob_base','international_x_prob_scenario')], by = 'Beach_FID', all.x = TRUE)
out_visitors <- merge(out_visitors, df2_s[df2_s$LGA_Name==input$lga, c('Beach_FID','interstate_x_prob_base','interstate_x_prob_scenario')], by = 'Beach_FID', all.x = TRUE)
out_visitors <- merge(out_visitors, LGA_CS, by = 'Beach_FID', all.x = TRUE)
out_visitors <- merge(out_visitors, LGA_PS, by = c('Beach_FID','Beach_Name'), all.x = TRUE)
out_visitors$CS_per_person_Base <- out_visitors$Total_CS_Base/out_visitors$domestic_x_prob_base
out_visitors$PS_per_person_Base <- out_visitors$Total_PS_Base/out_visitors$domestic_x_prob_base
out_visitors$CS_per_person_Scenario <- out_visitors$Total_CS_Scenario/out_visitors$domestic_x_prob_scenario
out_visitors$PS_per_person_Scenario <- out_visitors$Total_PS_Scenario/out_visitors$domestic_x_prob_scenario
# #EBO values
ebo <- read.csv(file = "EBO_input.csv", fileEncoding = "ISO-8859-1", stringsAsFactors = FALSE)
names(ebo) <- c('Beach_LGA_Name', '2023_household_LGA', '2023_household_NSW')
ebo <- ebo[,c('Beach_LGA_Name', '2023_household_LGA', '2023_household_NSW')]
ebo$Beach_LGA_Name[ebo$Beach_LGA_Name == 'Sutherland'] <- 'Sutherland Shire'
temp <- df3[c('Beach_FID','Beach_LGA_Name','Length_B')]
temp <- temp[!duplicated(temp), ]
temp <- aggregate(`Length_B` ~ Beach_LGA_Name, temp, sum)
names(temp) <- c('Beach_LGA_Name','Total_LGA_length_Base')
ebo <- merge(ebo, temp, by='Beach_LGA_Name', all.x = TRUE)
print(paste("++++++++++++> Beach_LGA_Name in df3_s_1: ", "Beach_LGA_Name" %in% names(df3_s_1)))
temp <- df3_s_1[c('Beach_FID','Beach_LGA_Name', 'Length_S')]
temp <- temp[!duplicated(temp), ]
temp <- aggregate(`Length_S` ~ Beach_LGA_Name, temp, sum)
names(temp) <- c('Beach_LGA_Name','Total_LGA_length_Scenario')
ebo <- merge(ebo, temp, by='Beach_LGA_Name', all.x = TRUE)
ebo$Total_NSW_Length_B <- sum(ebo$Total_LGA_length_Base, na.rm = TRUE)
ebo$Total_NSW_Length_S <- sum(ebo$Total_LGA_length_Scenario, na.rm = TRUE)
temp <- df3[c('Beach_FID','Beach_LGA_Name','Length_B')]
temp <- temp[!duplicated(temp), ]
ebo <- merge(ebo, temp, by='Beach_LGA_Name', all.x = TRUE)
temp <- df3_s_1[c('Beach_FID','Beach_LGA_Name','Length_S')]
temp <- temp[!duplicated(temp), ]
ebo <- merge(ebo, temp, by=c('Beach_FID','Beach_LGA_Name'), all.x = TRUE)
ebo$LGA_ebo_base <- ((89.19 * ebo$`2023_household_LGA`)/ebo$Total_LGA_length_Base) * ebo$Length_B
ebo$LGA_ebo_scenario <- ((89.19 * ebo$`2023_household_LGA`)/ebo$Total_LGA_length_Scenario) * ebo$Length_S
ebo$LGA_ebo_change <- ebo$LGA_ebo_scenario - ebo$LGA_ebo_base
ebo$State_ebo_base <- ((89.19 * ebo$`2023_household_NSW`)/ebo$Total_NSW_Length_B) * ebo$Length_B
ebo$State_ebo_scenario <- ((89.19 * ebo$`2023_household_NSW`)/ebo$Total_NSW_Length_S) * ebo$Length_S
ebo$State_ebo_change <- ebo$State_ebo_scenario - ebo$State_ebo_base
print(ebo)
# Reactive values (assuming 'reactive_values' is a list in Shiny)
for (i in seq_len(nrow(data_subset_modified()))) {
# updateTextInput(session, paste0("csb", i), paste("$", value = prettyNum(1, big.mark=",", scientific=FALSE)))
updateTextInput(session, paste0("csb", i), value = paste0("$ ", format(LGA_CS$Total_CS_Base[i], big.mark = ",", scientific = FALSE)))
updateTextInput(session, paste0("css", i), value = paste0("$ ", format(LGA_CS$Total_CS_Scenario[i], big.mark = ",", scientific = FALSE)))
updateTextInput(session, paste0("csc", i), value = paste0("$ ", format(LGA_CS$CS_Delta[i], big.mark = ",", scientific = FALSE)))
updateTextInput(session, paste0("psb", i), value = paste0("$ ", format(LGA_PS$Total_PS_Base[i], big.mark = ",", scientific = FALSE)))
updateTextInput(session, paste0("pss", i), value = paste0("$ ", format(LGA_PS$Total_PS_Scenario[i], big.mark = ",", scientific = FALSE)))
updateTextInput(session, paste0("psc", i), value = paste0("$ ", format(LGA_PS$Total_PS_Change[i], big.mark = ",", scientific = FALSE)))
}
})
}
# Create a Shiny app object ----------------------------------------------------
shinyApp(ui = ui, server = server)
